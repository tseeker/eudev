#!/bin/sh -e

supported_kernel() {
  case "$(uname -r)" in
    2.[012345].*|2.6.[0-9]|2.6.[0-9][!0-9]*) return 1 ;;
    2.6.[12][0-9]|2.6.[12][0-9][!0-9]*) return 1 ;;
    2.6.3[0-1]|2.6.3[0-1][!0-9]*) return 1 ;;
  esac
  return 0
}

tempdir() {
  local dir=$(tempfile --prefix=udev.)
  rm $dir
  mkdir $dir
  echo $dir
}

chrooted() {
  if [ "$(stat -c %d/%i /)" = "$(stat -Lc %d/%i /proc/1/root 2>/dev/null)" ];
  then
    # the devicenumber/inode pair of / is the same as that of /sbin/init's
    # root, so we're *not* in a chroot and hence return false.
    return 1
  fi
  echo "A chroot environment has been detected, eudev not started."
  return 0
}

in_debootstrap() {
  # debootstrap --second-stage may be run in an emulator instead of a chroot,
  # we need to check for this special case because start-stop-daemon would
  # not be available. (#520742)
  if [ -d /debootstrap/ ]; then
    echo "Being installed by debootstrap, eudev not started."
    return 0
  fi
  return 1
} 

can_start_udevd() {
  if ! supported_kernel; then
    echo "eudev requires a kernel >= 2.6.32, not started."
    return 1
  fi

  if [ ! -d /sys/class/ ]; then
    echo "eudev requires a mounted sysfs, not started."
    return 1
  fi

  if ! ps --no-headers --format args ax | egrep -q '^\['; then
    echo "eudev does not support containers, not started."
    return 1
  fi

  if ! grep -q '[[:space:]]devtmpfs$' /proc/filesystems; then
    echo "eudev requires devtmpfs support, not started."
    return 1
  fi

  if [ -e /etc/udev/disabled ]; then
    echo "/etc/udev/disabled has been detected, eudev not started."
    return 1
  fi

  return 0
}

enable_udev() {
  can_start_udevd || return 0

  invoke-rc.d eudev start

  # restart some daemons because their /dev sockets might have been hidden by
  # the devtmpfs
  kill -s HUP 1
  local sysloginits="inetutils-syslogd rsyslog socklog-run sysklogd syslog-ng"
  for script in $sysloginits; do
    [ -x /etc/init.d/$script ] && invoke-rc.d $script restart || true
  done
}

update_initramfs() {
  [ -x /usr/sbin/update-initramfs -a -e /etc/initramfs-tools/initramfs.conf ] \
    || return 0
  update-initramfs -u
}

write_interfaces_rules() {
  local devpath
  for devpath in /sys/class/net/*; do
    [ -d "$devpath" ] || continue
    udevadm test --action=add $devpath > /dev/null || true
  done
}

update_hwdb() {
  udevadm hwdb --update || true
}

case "$1" in
    configure)
    # update/create hwdb before we (re)start eudev
    update_hwdb

    # Add new system group used by udev rules
    addgroup --quiet --system input

    if [ -z "$2" ]; then # first install
      if ! chrooted && ! in_debootstrap; then
	write_interfaces_rules
	enable_udev
      fi
    else # upgrades
      if ! chrooted; then
	if [ -e /etc/udev/kernel-upgrade ]; then
	  echo "Kernel upgrade mode, udevd has not been restarted."
	  echo "Please reboot the system as soon as possible."
	  rm /etc/udev/kernel-upgrade
	elif can_start_udevd; then
	  invoke-rc.d eudev restart
	fi
      fi
    fi

    update_initramfs
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    triggered)
    update_hwdb
    exit 0
    ;;

    interfaces)
    write_interfaces_rules
    ;;

    *)
    echo "$0 called with unknown argument '$1'" >&2
    exit 1
    ;;
esac

#DEBHELPER#

